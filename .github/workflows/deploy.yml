name: Deploy Medusa to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: medusa-app
  ECS_CLUSTER: medusa-cluster
  ECS_SERVICE: medusa-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Render new ECS task definition with env vars
      id: render-task-def
      run: |
        # Download the current task definition
        aws ecs describe-task-definition --task-definition $ECS_SERVICE > task-def.json

        # Update image and environment variables
        cat task-def.json | jq '
          .taskDefinition |
          .containerDefinitions[0].image = "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" |
          .containerDefinitions[0].environment = [
            { "name": "DATABASE_URL", "value": "${{ secrets.DATABASE_URL }}" },
            { "name": "JWT_SECRET", "value": "${{ secrets.JWT_SECRET }}" },
            { "name": "COOKIE_SECRET", "value": "${{ secrets.COOKIE_SECRET }}" }
          ]
        ' > new-task-def.json

        # Register the new task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://new-task-def.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Update ECS service to use new task definition
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition ${{ steps.render-task-def.outputs.task_def_arn }} \
          --force-new-deployment